Subject: [PATCH] comit
---
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1695847735909)
+++ b/.idea/misc.xml	(date 1695847735909)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11 (local)" project-jdk-type="Python SDK" />
+  <component name="PyCharmProfessionalAdvertiser">
+    <option name="shown" value="true" />
+  </component>
+</project>
\ No newline at end of file
Index: medoto get.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/medoto get.py b/medoto get.py
new file mode 100644
--- /dev/null	(date 1695926279244)
+++ b/medoto get.py	(date 1695926279244)
@@ -0,0 +1,31 @@
+contatos = {"guilherme": {"nome": "guilherme", "telefone": "3333-2221"}}
+# contatos["chave"] #keyERror
+
+resultado = contatos.get("chave")  # none
+print(resultado)
+
+resultado = contatos.get("chave", {})  # {}
+print(resultado)
+
+resultado = contatos.get(
+    "guilherme", {}
+)
+print(resultado)
+
+resultado = contatos.keys()
+print(resultado)
+novo_dic = {"a": 100, 1: "teste", "b": "python"}
+print(novo_dic.keys())
+print("##########################")
+resultado = novo_dic.pop("a")
+print(resultado)
+print("###############################")
+resultado = novo_dic.pop("r", {"não encontrado"})
+print(resultado)
+
+contatos.popitem()
+print("#######################")
+print("####setdafault###")
+contato = {"nome": "guilherme", "telefone": "3333-2221"}
+contato.setdefault("nome", "geovana")
+print(contato)
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1694489644272)
+++ b/.idea/vcs.xml	(date 1694489644272)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: usarios.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/usarios.py b/usarios.py
new file mode 100644
--- /dev/null	(date 1695926279281)
+++ b/usarios.py	(date 1695926279281)
@@ -0,0 +1,52 @@
+from flask import Flask, jsonify
+
+app = Flask(__name__)
+
+# Dados dos usuários
+usuarios = [
+    {
+        "UserID": 1,
+        "Nome": "João",
+        "Perfil": "Administrador",
+        "Mensagem": "Acredite em você e em suas habilidades!",
+        "ID": "ID001"
+    },
+    {
+        "UserID": 2,
+        "Nome": "Maria",
+        "Perfil": "Usuário",
+        "Mensagem": "O sucesso começa com a determinação.",
+        "ID": "ID002"
+    },
+    {
+        "UserID": 3,
+        "Nome": "Carlos",
+        "Perfil": "Moderador",
+        "Mensagem": "Você é capaz de superar qualquer desafio.",
+        "ID": "ID003"
+    },
+    {
+        "UserID": 4,
+        "Nome": "Ana",
+        "Perfil": "Usuário",
+        "Mensagem": "Lembre-se de que cada dia é uma nova oportunidade.",
+        "ID": "ID004"
+    },
+    {
+        "UserID": 5,
+        "Nome": "Pedro",
+        "Perfil": "Convidado",
+        "Mensagem": "Nunca subestime seu próprio potencial.",
+        "ID": "ID005"
+    }
+]
+
+
+# Endpoint para obter a lista de usuários
+@app.route('/usuarios', methods=['GET'])
+def get_usuarios():
+    return jsonify(usuarios)
+
+
+if __name__ == '__main__':
+    app.run(debug=True)
Index: listas.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/listas.py b/listas.py
new file mode 100644
--- /dev/null	(date 1695926279291)
+++ b/listas.py	(date 1695926279291)
@@ -0,0 +1,21 @@
+# tipos de listas
+### Exemplo 01
+
+# frutas = ["laranja", "maca", "uva"]
+# print(frutas)
+
+# frutas = []
+# print(frutas)
+
+# letras  = list("python")
+# print(letras)
+# numeros = list(range(10))
+# print(numeros)
+# carro = ["Ferrari", "F8", "420000", "2020", 2900, "São Paulo ", True]
+# print(carro)
+
+### Exemplo 02
+
+frutas = ["maça", "laranja", " uva", "pera"]
+frutas[-1]  # pera
+frutas[-3]  # laranja
Index: Dicionario.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Dicionario.py b/Dicionario.py
new file mode 100644
--- /dev/null	(date 1695926279301)
+++ b/Dicionario.py	(date 1695926279301)
@@ -0,0 +1,21 @@
+contatos = {
+    "guilherme@gmail.com": {"nome": "guilherme", "Telefone": "3333-2122"},
+    "giovanna@gmail.com": {"nome": "giovana", "Telefone": "3333-2123"},
+    "chappie@gmail.com": {"nome": "chappie", "Telefone": "3333-2122"},
+    "melaine@gmail.com": {"nome": "melaine", "Telefone": "3333-2122", "extra": {"a": 1}},
+}
+telefone = contatos["giovanna@gmail.com"]["Telefone"]
+
+print(telefone)
+
+extra = contatos["melaine@gmail.com"]["extra"]["a"]
+
+print(extra)
+
+for chave in contatos:
+    print(chave, contatos[chave])
+
+    print("##########################")
+    print("metodo limpo")
+for chave, valor in contatos.items():
+    print(chave, valor)
Index: metodos_da_classe.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/metodos_da_classe.py b/metodos_da_classe.py
new file mode 100644
--- /dev/null	(date 1695926279267)
+++ b/metodos_da_classe.py	(date 1695926279267)
@@ -0,0 +1,32 @@
+contatos = {
+    "guilherme@gmail.com": {"nome": "guilherme", "Telefone": "3333-2122"},
+    "giovanna@gmail.com": {"nome": "giovana", "Telefone": "3333-2123"},
+    "chappie@gmail.com": {"nome": "chappie", "Telefone": "3333-2122"},
+    "melaine@gmail.com": {"nome": "melaine", "Telefone": "3333-2122", "extra": {"a": 1}},
+}
+contatos.clear()
+print(contatos)
+
+# metodo copy
+
+contato = {"guilherme@gmail.com": {"nome": "guilherme", "Telefone": "3333-2122"}}
+copia = contato.copy()
+copia["guilherme@gmail.con"] = {"nome": "gui"}
+contato["guilherme@gmail.com"]
+print(contato)
+copia["guilherme@gmail.con"]
+print(copia)
+print("########################")
+dict.fromkeys(["nome", "telefone"])
+dict.fromkeys(["nome", "telefone"], "vazio")
+print("#################")
+print("modo get")
+# contato["chave"]
+contato.get("chave")
+print(contato)
+contato.get("chave", {})
+print(contato)
+contato.get("guilherme@gmail.com", {})
+print(contato)
+
+print("############################")
Index: lista apeend.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lista apeend.py b/lista apeend.py
new file mode 100644
--- /dev/null	(date 1695926279231)
+++ b/lista apeend.py	(date 1695926279231)
@@ -0,0 +1,15 @@
+# lista = []
+# lista.append(1)
+# lista.append("Python")
+# lista.append([40,30,20]
+# print(lista)
+
+############################
+lista = [1, 'Python', [40, 30, 20]]
+l2 = lista.copy()
+print(lista)
+
+print(id(l2), id(lista))
+l2[0] = 2
+print(lista)
+print(l2)
Index: criando dicionario.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/criando dicionario.py b/criando dicionario.py
new file mode 100644
--- /dev/null	(date 1695926279261)
+++ b/criando dicionario.py	(date 1695926279261)
@@ -0,0 +1,11 @@
+pessoas = {"nome": "guilherme", "idade": 28}
+print(pessoas)
+pessoas = dict(nome="guilherme", idade=28)
+print(pessoas)
+pessoas["telefone"] = "333-1234"  # {'nome': 'guilherme', 'idade': 28, 'telefone': '333-1234'}
+print(pessoas)
+
+pessoas["nome"] = "maria"
+print(pessoas)
+
+tipos
Index: Conjuntos.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Conjuntos.py b/Conjuntos.py
new file mode 100644
--- /dev/null	(date 1695926279257)
+++ b/Conjuntos.py	(date 1695926279257)
@@ -0,0 +1,76 @@
+print(" conjutos")
+print("Criando um set")
+
+print("set([1,2,3,1,3,4])")
+s = set([1, 2, 3, 1, 3, 4])
+print("monstra lista organizada: {}".format(s))
+print("exemplos")
+print("#################")
+print('set("abacaxi")')
+set("abacaxi")
+print(set("abacaxi"))
+
+print("#################")
+print("set((""palio", "gol", "celta", "palio""))")
+print(set(("palio", "gol", "celta", "palio")))
+print("##############################")
+
+print("Exemplos 01")
+numeros = {1, 2, 3, 4}
+# print(numeros[0])
+numeros = list(numeros)
+print(numeros[0])
+print("################")
+
+print("Exemplo 02")
+carros = {"gol", "celta", "palio"}
+for carro in carros:
+    print(carro)
+print("##############")
+
+carros = {"gol", "celta", "palio"}
+for indice, carro in enumerate(carros):
+    print(f"{indice}:{carro}")
+
+print("##########################")
+
+print("{}.union")
+conjunto_a = {1, 2}
+conjunto_b = {3, 4}
+
+c = conjunto_a.union(conjunto_b)
+print(c)
+
+print("################")
+print("{}.intersection")
+conjunto_a = {1, 2, 3}
+conjunto_b = {2, 3, 4}
+
+c = conjunto_a.intersection(conjunto_b)
+print(c)
+
+print("################")
+print("{}.diference")
+conjunto_a = {1, 2, 3}
+conjunto_b = {2, 3, 4}
+c = conjunto_a.difference(conjunto_b)
+print(c)
+c = conjunto_b.difference((conjunto_a))
+print(c)
+print("#########################")
+print("{}. symmetric_diference")
+conjunto_a = {1, 2, 3}
+conjunto_b = {2, 3, 4}
+c = conjunto_a.symmetric_difference(conjunto_b)
+print(c)
+
+print("#########################")
+print("{}.issubset")
+
+conjunto_a = {1, 2, 3}
+conjunto_b = {4, 1, 2, 5, 6, 3}
+c = conjunto_a.issubset(conjunto_b)
+print(c)
+c = conjunto_b.issubset(conjunto_a)
+print(c)
+print("#########################")
Index: Tuplas.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Tuplas.py b/Tuplas.py
new file mode 100644
--- /dev/null	(date 1695926279217)
+++ b/Tuplas.py	(date 1695926279217)
@@ -0,0 +1,43 @@
+print("a diferança da tupla é que ela não altera os valores")
+print("Exemplos de Tuplas! ")
+frutas = ("laranja", "pera", "uva",)
+print(frutas)
+print("######################")
+letras = tuple("python")
+numeros = tuple([1, 2, 3, 4])
+print(numeros)
+print("###################")
+pais = ("Brasil",)
+print(pais)
+print("###############")
+print("Exemplos de Frutas")
+frutas = ("maça", "laranja", "uva", "pera",)
+f = frutas[0]
+print(f)
+f = frutas[2]
+print(f)
+f = frutas[-1]
+print(f)
+
+print("Exemplo de Matriz")
+matriz = (
+    (1, "a", 2),
+    ("b", 3, 4),
+    (6, 5, "c"),
+)
+
+m1 = matriz[0]
+print(m1)
+print("###############")
+m2 = matriz[0][0]
+print(m2)
+print("################")
+m3 = matriz[0][-1]
+print(m3)
+print("################")
+m4 = matriz[-1][-1]
+print(m4)
+print("###################")
+print(" a tupla contem apenas alguns metodos"
+      "como ().count, ()index e len"
+      "as tuplas são imutaveis ")
Index: .idea/Trilha_dio_python.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Trilha_dio_python.iml b/.idea/Trilha_dio_python.iml
new file mode 100644
--- /dev/null	(date 1694577366454)
+++ b/.idea/Trilha_dio_python.iml	(date 1694577366454)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/venv" />
+    </content>
+    <orderEntry type="jdk" jdkName="Python 3.11 (local)" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
new file mode 100644
--- /dev/null	(date 1686190265746)
+++ b/main.py	(date 1686190265746)
@@ -0,0 +1,16 @@
+# This is a sample Python script.
+
+# Press Shift+F10 to execute it or replace it with your code.
+# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.
+
+
+def print_hi(name):
+    # Use a breakpoint in the code line below to debug your script.
+    print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.
+
+
+# Press the green button in the gutter to run the script.
+if __name__ == '__main__':
+    print_hi('PyCharm')
+
+# See PyCharm help at https://www.jetbrains.com/help/pycharm/
Index: extend.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extend.py b/extend.py
new file mode 100644
--- /dev/null	(date 1695926279247)
+++ b/extend.py	(date 1695926279247)
@@ -0,0 +1,4 @@
+linguagens = ['Python', 'js', 'c']
+print(linguagens)
+linguagens.extend(['c++', 'java'])
+print(linguagens)
Index: exemplo_lista01.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/exemplo_lista01.py b/exemplo_lista01.py
new file mode 100644
--- /dev/null	(date 1695926279227)
+++ b/exemplo_lista01.py	(date 1695926279227)
@@ -0,0 +1,11 @@
+# numeros = [1,30,21,2,9,65.34]
+# pares = []
+# for numero in numeros:
+#    if numero % 2==0:
+#       pares.append(numero)
+
+# print(pares)
+
+numeros = [1, 30, 21, 9, 2, 65, 34]
+pares1 = [numero for numero in numeros if numero % 2 == 0]
+print(pares1)
Index: teste26.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/teste26.py b/teste26.py
new file mode 100644
--- /dev/null	(date 1695926279807)
+++ b/teste26.py	(date 1695926279807)
@@ -0,0 +1,1 @@
+
Index: count.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/count.py b/count.py
new file mode 100644
--- /dev/null	(date 1695926279237)
+++ b/count.py	(date 1695926279237)
@@ -0,0 +1,7 @@
+cores = ['vermelho', 'azul', 'verde', 'azul']
+cor = cores.count('vermelho')
+print(cor)
+cor1 = cores.count('azul')
+print(cor1)
+cor2 = cores.count('verde')
+print(cor2)
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1694489644239)
+++ b/.idea/modules.xml	(date 1694489644239)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/Trilha_dio_python.iml" filepath="$PROJECT_DIR$/.idea/Trilha_dio_python.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: exemplo_lista02.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/exemplo_lista02.py b/exemplo_lista02.py
new file mode 100644
--- /dev/null	(date 1695926279284)
+++ b/exemplo_lista02.py	(date 1695926279284)
@@ -0,0 +1,9 @@
+numeros = [1, 30, 21, 2, 9, 65.34]
+quadrado = []
+for numero in numeros:
+    quadrado.append(numero ** 2)
+    print(quadrado)
+
+numeros = [1, 30, 21, 2, 9, 65.34]
+quadrado = [numero ** 2 for numero in numeros]
+print(quadrado)
Index: imput.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/imput.py b/imput.py
new file mode 100644
--- /dev/null	(date 1695926279251)
+++ b/imput.py	(date 1695926279251)
@@ -0,0 +1,8 @@
+nome = input("informe o seu nome: ")
+idade = input("informe sua idade: ")
+
+print(nome, idade)
+print(nome, idade)
+print(nome, idade, end="... \n")
+print(nome, idade, sep="#", end="... \n")
+print(nome, idade, sep="#")
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1694489644265)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1694489644265)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: index.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/index.py b/index.py
new file mode 100644
--- /dev/null	(date 1695926279274)
+++ b/index.py	(date 1695926279274)
@@ -0,0 +1,66 @@
+print('######################')
+print("exemplo de de INDEX")
+lingaguens = ['python', 'c', 'c++', 'cshap', 'java']
+l1 = lingaguens.index('java')
+print('{}'.format(l1))
+
+l2 = lingaguens.index('c')
+print('{}'.format(l2))
+print('######################')
+
+#####################################
+#########  POP##################
+print("exemplo de POP")
+
+l4 = lingaguens.pop()
+print('{}'.format(l4))
+l5 = lingaguens.pop()
+print('{}'.format(l5))
+l6 = lingaguens.pop(-1)
+print('{}'.format(l6))
+print('######################')
+#########################################
+#############REMOVE################
+lingaguens = ['python', 'c', 'c++', 'cshap', 'java']
+print("exepmplo de remove!")
+print(lingaguens)
+lingaguens.remove('c')
+print(lingaguens)
+
+print('######################')
+############################
+########## reverse#############
+print("exemplo de reverse")
+lingaguens = ['python', 'c', 'c++', 'cshap', 'java']
+print(lingaguens)
+lingaguens.reverse()
+print(lingaguens)
+print('######################')
+
+print("exemplo de SORT")
+lingaguens = ['python', 'c', 'c++', 'cshap', 'java']
+print(lingaguens)
+lingaguens.sort()
+print(lingaguens)
+lingaguens.sort(reverse=True)
+print(lingaguens)
+lingaguens.sort(key=lambda x: len(x))
+print(lingaguens)
+lingaguens.sort(key=lambda x: len(x), reverse=True)
+print("############################")
+print("exemplo de LEN")
+
+lingaguens = ['python', 'c', 'c++', 'cshap', 'java', 'rubi']
+print(lingaguens)
+l = len(lingaguens)
+print(" o resulto de len é : {}".format(l))
+print("############################")
+print("exemplo de SOTED")
+
+lingaguens = ['python', 'c', 'c++', 'cshap', 'java', 'rubi']
+print(lingaguens)
+st = sorted(lingaguens, key=lambda x: len(x))
+print(st)
+st = sorted(lingaguens, key=lambda x: len(x), reverse=True)
+
+print(st)
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1694489644399)
+++ b/.idea/.gitignore	(date 1694489644399)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
